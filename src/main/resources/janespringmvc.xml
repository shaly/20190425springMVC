<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:mvc="http://www.springframework.org/schema/mvc" 
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation=
        "http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/xsi
        http://www.springframework.org/schema/xsi/spring-xsi-3.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
        http://www.springframework.org/schema/p
        http://www.springframework.org/schema/p/spring-p-3.1.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-3.1.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.1.xsd">


	<!-- 加载SpringMVC的控制类，完成springMVC自动装配，让spring来管理 -->
	<context:component-scan base-package="com.syf.study.controller">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 开启springMVC的annotation，启用springMVC的annotation让开发者在springMVC中能够去使用@AutoWrite,@Resource等这些配置。该配置是默认开启的，不写也行，但写出来方便理解 -->
	<context:annotation-config></context:annotation-config>
	
	<!-- 配置注解驱动，可以让request中一些请求参数或者一些请求信息完成注入和转换的操作。其中包括json/xml,转换 -->
	<mvc:annotation-driven/>
	
	<!-- 名字和DateFormatter.java类名一致 -->
	<!-- 配置注解驱动，可以让request中一些请求参数或者一些请求信息完成注入和转换的操作。其中就包括json/xml，转换 -->
	<!-- <mvc:annotation-driven conversion-service="dateFormatter"></mvc:annotation-driven> -->
	<!-- 名字和DateFormatter.java类名一致 -->
	<!-- 配置全局范围内的日期烈性转换   String Date -->
<!-- 	<bean id="dateFormatter" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="formatters">
			<list>
				<bean class="com.syf.study.config.DateFormatter"></bean>
			</list>
		</property>
	</bean> -->
	<!-- 请求格式化date参数方式3 converters -->
 	<mvc:annotation-driven conversion-service="dateConverts"></mvc:annotation-driven>
 	<bean id="dateConverts" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="com.syf.study.config.DateConverts">
					<property name="formatStr" value="yyyy-MM-dd HH:mm:ss"></property>
				</bean>
			</list>
		</property>
	</bean>
	<!-- 视图解析器 
		对象模型的视图解析器，下面是一个默认的视图解析器
	-->
	<!-- <bean id="defaultViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
		<property name="prefix" value="/WEB-INF/pages/"></property>
		<property name="suffix" value=".jsp"></property>
		<property name="exposeContextBeansAsAttributes" value="true"></property>
	</bean> -->

	<!-- 文件上传配置，除了id=“multipartResolver”命名有要求必须和web.xml中的DispatcherServlet的MULTIPART_RESOLVER_BEAN_NAME属性值一致之外，其它选项都可以选择自定义 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxInMemorySize" value="524880"></property><!-- 设置最大上限，单位是字节(B)，这里是5MB.默认大小是1024=1KB,默认值会自动化设置。B-KB-MB-GB -->
		<property name="uploadTempDir" value="file:/D://SOFT_STUDY//eclipse//runTime//dmpfile"></property><!-- 临时文件夹，上生产的时候不要写磁盘绝对路径，写相对路径 -->
	
	</bean>



	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/pages/"></property>
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">1</prop>
				<prop key="tag_syntax">auto_detect</prop><!-- square_bracket|auto_detect设置标签类型两种：[]和<>.[]这种标签 -->
				
				<prop key="default_encoding">UTF-8</prop>
				<prop key="output_encoding">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<prop key="boolean_format">true,false</prop>
				<prop key="whitespace_stripping">true</prop>
				<prop key="url_escaping_charset">UTF-8</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="number_format">#.###</prop><!-- 设置数字格式以免出现000.00 -->
				<prop key="classic_compatible">true</prop><!-- 可以满足一般需求。默认情况变量为null则替换为空字符串，如果需要自定义，写上${ -->
				<!-- <prop key="template_exception_handler">com.tz.core.FreemarkerExceptionHandler</prop> -->
				<prop key="template_exception_handler">html_debug</prop><!-- ignore,debug,html_debug,rethrow -->
			</props>
		</property>
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>

	<!-- 将视图解析器修改为freemarker解析器 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"></property>
		<property name="contentType" value="text/html"></property>
		<property name="exposeRequestAttributes" value="true"></property>
		<property name="exposeSessionAttributes" value="true"></property>
		<property name="exposeSpringMacroHelpers" value="true"></property>
		<property name="allowSessionOverride" value="true"></property>
		<property name="allowRequestOverride" value="true"></property>
		<property name="cache" value="true"></property>
		<property name="suffix" value=".html"></property><!-- 默认是.ftl格式 -->
		<property name="order" value="0"></property>
	</bean>


	<!-- 静态资源的处理 -->
	<!-- <mvc:resources location="/WEB-IN/statics/css" mapping="/css/**"></mvc:resources>
	<mvc:resources location="/WEB-IN/statics/js" mapping="/js/**"></mvc:resources>
	<mvc:resources location="/WEB-IN/statics/images" mapping="/images/**"></mvc:resources>
 -->
	<mvc:resources location="/WEB-INF/statics/css/" mapping="/css/**"></mvc:resources>
	<mvc:resources location="/WEB-INF/statics/js/" mapping="/js/**"></mvc:resources>
	<mvc:resources location="/WEB-INF/statics/images/" mapping="/images/**"></mvc:resources>
	<mvc:resources location="/upload/" mapping="/upload/**"></mvc:resources>
	

	<!-- 统一异常类处理（id名字不可变，因为在DispatcherServlet中定义好了） -->
	<bean id="handlerExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.Exception">/error/main</prop><!-- 指定错误跳转的页面 -->
				<!-- <prop key="java.lang.ArithmeticException">/err/classError</prop> --><!-- 指定错误跳转的页面 -->
			</props>
		</property>
		<property name="defaultErrorView" value="/error/default"></property><!-- 拦截的错误是未定义的，找不到的的错误就跳转到此页面 -->
	</bean>

</beans>